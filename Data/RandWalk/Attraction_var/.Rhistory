450-60-160
400-120
70+60+77+85+170+168+167+126+95+87
5094+265+333
10417+24694
48737.97 + 73156.30
40/250
50/250
?rvm
require(plotrix)
library(circular)
require(CircStats)
require(useful)
?rvm
source('~/Dropbox/ChemoFunAnalysis/Data/RandWalk/Attraction/Attraction_const/Attraction_const.R')
source('~/Dropbox/ChemoFunAnalysis/Data/RandWalk/Attraction/Attraction_const/Attraction_const.R')
source('~/Dropbox/ChemoFunAnalysis/Data/RandWalk/Attraction/Attraction_g_const/Attraction_g_const.R')
source('~/Dropbox/ChemoFunAnalysis/Data/RandWalk/Attraction/Attraction_g_const/Attraction_g_const.R')
mv.theta
X.cor
# Simuation of individual based model with constant attraction and constant agent birth-death.
#
# Simulates a lattice-free random walk model without space occupying properties.
# Rules governing agent movement as described in associated publication.
#
# N = 1000 agents are initially uniformly distributed within a circular region R with radius rR.
# A central circular region B with radius rB occurs within R.
# The boundary of R is a reflecting boundary, such that agents cannot leave R.
#
# Jack Hywood and Mark N. Read, 2019
setwd("~/Dropbox/ChemoFunAnalysis/Data/RandWalk/Attraction/Attraction_g_const/")
working_dir <- "~/Dropbox/ChemoFunAnalysis/Data/RandWalk/Attraction/Attraction_g_const/"
dir <- "Attraction_g_const"
SEED = 2 # Set to 1, 2, or 3 to generate the simulations from the associated publication. Otherwise nil seed used for simulation.
N = 1000 # Number of agents uniformly distributed in region R.
B.empty = FALSE # Set B.empty = FALSE to keep all agents uniformly distributed in R. Set B.empty = TRUE to remove all agents within B.
Del = 2.5 # Distance of each movement.
tau <- 1 # Duration of each time step.
T_Full <- 200 # Duration of simulation.
times_unique <- seq(0,T_Full,tau) # Vector of time points.
time_m <- length(times_unique) # Number of time points
rR = 250 # Radius of R.
rB = 50 # Radius of B.
rA = rR-rB # Width of annulus R-B.
beta <- 100 # Parameter for strength of bias.
sig = 75 # Parameter for range of bias.
# Derivative dV/dr as defined in associated publicaion, which determines bias of agent movements:
dVdr = function(r){
return(-beta*r/sig^2*exp(-(r^2)/(2*sig^2)))
}
# g function as defined in associated publication, defines birth and death rates for agents:
# Gives probability of an individual agent creating a new agent (if gfun > 0) or dying (if gfun < 0) for each agent.
gfun = function(r){
return(0.005)
}
if(SEED==1){
set.seed(1001)
}
if(SEED==2){
set.seed(1002)
}
if(SEED==3){
set.seed(1003)
}
# Populate R uniformly with agents:
rhoX = rR*sqrt(runif(N, min = 0, max = 1))
thetaX = runif(N, min = 0, max = 2*pi)
X.x <- rhoX*cos(thetaX)
X.y <- rhoX*sin(thetaX)
X <- cbind(X.x,X.y)
# If B.empty==TRUE then agents within B are removed:
if(B.empty==TRUE && sum(((X[,1])^2+(X[,2])^2)<=rB^2)>0){
X = X[-which(((X[,1])^2+(X[,2])^2)<=rB^2),]
N = dim(X)[1]
}
# Plot initial agent positions:
pdf(paste(working_dir, '/Xfirst',dir,'.pdf', sep=''))
plot(X,xlim=c(-rR,rR), ylim=c(-rR,rR),asp=1,pch=20,
ylab="",
xlab="",
xaxt="n", yaxt="n",axes=FALSE,
cex.axis=1.5,
cex.lab=2,
las=1)
draw.circle(0,0,rB,nv=100,border=NULL,col="black",lty=1,density=NULL,
angle=45,lwd=1)
draw.circle(0,0,rR,nv=100,border=NULL,lty=1,density=NULL,
angle=45,lwd=1)
points(X[which(((X[,1])^2+(X[,2])^2)<=rB^2),],
bg="red",col="red",pch=20)
dev.off()
X.mat <- X
T.mat <- matrix(rep(0,dim(X)[1]),ncol=1)
k=1
r = sqrt(X[,1]^2+X[,2]^2)  # r values for each agent
# Add additional agents to simulation:
randr = runif(dim(X)[1])
gX = gfun(r)
X = rbind(X,X[(randr <= gX),])
dV = dVdr(r) # Gradient of V(r) at position of each agent
mu = cart2pol(-X[,1],-X[,2])[,2][[1]] # Mean direction in radians of direction moved for each agent
# Generate directions moved for each agent via von Mises distribution:
mv.theta = rep(0,(dim(X)[1]))
for(i in 1:(dim(X)[1])){
mv.theta[i] = rvm(n=1,mean=mu[i], k=abs(dV[i]))
}
source('~/Dropbox/ChemoFunAnalysis/Data/RandWalk/Attraction/Attraction_const/Attraction_const.R')
source('~/Dropbox/ChemoFunAnalysis/Data/RandWalk/Attraction/Attraction_const/Attraction_const.R')
source('~/Dropbox/ChemoFunAnalysis/Data/RandWalk/Attraction/Attraction_const/Attraction_const.R')
? is.null
source('~/Dropbox/ChemoFunAnalysis/Data/RandWalk/Attraction/Attraction_const/Attraction_const.R')
source('~/Dropbox/ChemoFunAnalysis/Data/RandWalk/Attraction/Attraction_const/Attraction_const.R')
source('~/Dropbox/ChemoFunAnalysis/Data/RandWalk/Attraction/Attraction_const/Attraction_const.R')
source('~/Dropbox/ChemoFunAnalysis/Data/RandWalk/Attraction/Attraction_const/Attraction_const.R')
source('~/Dropbox/ChemoFunAnalysis/Data/RandWalk/Attraction/Attraction_g_const/Attraction_g_const.R')
source('~/Dropbox/ChemoFunAnalysis/Data/RandWalk/Attraction/Attraction_g_const/Attraction_g_const.R')
source('~/Dropbox/ChemoFunAnalysis/Data/RandWalk/Attraction/Attraction_g_const/Attraction_g_const.R')
source('~/Dropbox/ChemoFunAnalysis/Data/RandWalk/Attraction/Attraction_g_const/Attraction_g_const.R')
abs(dV[i])
dV
dV[i]
i
length(DV)
length(dV)
dim(X)
(dim(X)[1])
source('~/Dropbox/ChemoFunAnalysis/Data/RandWalk/Attraction/Attraction_g_const/Attraction_g_const.R')
source('~/Dropbox/ChemoFunAnalysis/Data/RandWalk/Attraction/Attraction_g_r/Attraction_g_r.R')
source('~/Dropbox/ChemoFunAnalysis/Data/RandWalk/Attraction/Attraction_g_r/Attraction_g_r.R')
source('~/Dropbox/ChemoFunAnalysis/Data/RandWalk/Attraction/Attraction_g_r/Attraction_g_r.R')
source('~/Dropbox/ChemoFunAnalysis/Data/RandWalk/Attraction/Attraction_var/Attraction_var.R')
